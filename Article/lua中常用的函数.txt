函数：
luaL_newstate() 										创建lua_State
luaL_openlibs(lua_State* L)								开启各种库
luaL_loadfile(lua_State *L, const char *filename)		
lua_pcall(lua_State *L, int nargs, int nresults, int errfunc, int ctx)
lua_close(lua_State* L)									结束lua，与luaL_newstate对应
luaL_checknumber(lua_State *L, int narg)				检测第narg个参数是否是number型
luaL_checkinteger(lua_State *L, int narg)				检测第narg个参数是否是integer型
luaL_checklstring(lua_State *L, int narg)				检测第narg个参数是否是lstring型
luaL_checkunsigned(lua_State *L, int narg)				检测第narg个参数是否是unsigned型
lua_pushnil (lua_State *L)								把nil值压栈
lua_pushnumber(lua_State *L, lua_Number n)				把一个number型的值压栈
lua_pushinteger(lua_State *L, lua_Integer n)			把一个integer型的值压栈
lua_pushunsigned(lua_State *L, lua_Unsigned u)			把一个unsigned型的值压栈
lua_pushlstring(lua_State *L, const char *s, size_t len)把一个lstring型的值压栈
lua_pushstring(lua_State *L, const char *s)				把一个string型的值压栈
lua_pushvfstring(lua_State *L, const char *fmt, va_list argp)
lua_pushfstring(lua_State *L, const char *fmt, ...)
lua_pushcclosure(lua_State *L, lua_CFunction fn, int n)	
lua_pushboolean(lua_State *L, int b)					把一个boolean型的值压栈
lua_pushlightuserdata(lua_State *L, void *p)			把一个lightuserdata型的值压栈
lua_pushthread(lua_State *L)

#define lua_pushglobaltable(L)  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS)
#define lua_pushliteral(L, s)	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
#define lua_register(L,n,f) 	(lua_pushcfunction(L, (f)), lua_setglobal(L, (n)))

#define lua_tonumber(L,i)	lua_tonumberx(L,i,NULL)
#define lua_tointeger(L,i)	lua_tointegerx(L,i,NULL)
#define lua_tounsigned(L,i)	lua_tounsignedx(L,i,NULL)
#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)		

#define lua_isnoneornil(L, n)		(lua_type(L, (n)) <= 0)
#define lua_isfunction(L,n)			(lua_type(L, (n)) == LUA_TFUNCTION)
#define lua_istable(L,n)			(lua_type(L, (n)) == LUA_TTABLE)
#define lua_islightuserdata(L,n)	(lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
#define lua_isnil(L,n)				(lua_type(L, (n)) == LUA_TNIL)
#define lua_isboolean(L,n)			(lua_type(L, (n)) == LUA_TBOOLEAN)
#define lua_isthread(L,n)			(lua_type(L, (n)) == LUA_TTHREAD)
#define lua_isnone(L,n)				(lua_type(L, (n)) == LUA_TNONE)						

#define lua_pop(L,n)		lua_settop(L, -(n)-1)
#define lua_newtable(L)		lua_createtable(L, 0, 0)

lua_setglobal(lua_State *L, const char *var)

结构：
typedef struct luaL_Reg {
	const char *name;
	lua_CFunction func;
} luaL_Reg;												注册c函数结构体
typedef int (*lua_CFunction) (lua_State *L);			c函数原型
